"use strict";(self.webpackChunkdocusaurus_static=self.webpackChunkdocusaurus_static||[]).push([[3511],{7781:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>r,toc:()=>u});var i=n(5893),s=n(1151);const a={},o="Group Assignment Using Authentication Messages",r={id:"configuration/groupassignmentusingauth",title:"Group Assignment Using Authentication Messages",description:"If ATAK or another TAK client is configured to send an authentication message after establishing a connection to TAK Server, the username and password credentials contained in that message will be used, in conjunction with an authentication backend, to determine the group membership of a user. TAK Server will then filter messages according to common group membership, in a similar fashion to filtering configured by \\ for a given \\.",source:"@site/docs/configuration/groupassignmentusingauth.md",sourceDirName:"configuration",slug:"/configuration/groupassignmentusingauth",permalink:"/docs/configuration/groupassignmentusingauth",draft:!1,unlisted:!1,editUrl:"https://gitlab.com/octospacc/editocttrialTools/-/blob/main/docusaurus-static/docs/configuration/groupassignmentusingauth.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Group Assignment by Input",permalink:"/docs/configuration/groupassignmentbyinput"},next:{title:"Group Assignment using Client Certificates",permalink:"/docs/configuration/groupassignmentusingclientcerts"}},c={},u=[];function l(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"group-assignment-using-authentication-messages",children:"Group Assignment Using Authentication Messages"}),"\n",(0,i.jsx)(t.p,{children:"If ATAK or another TAK client is configured to send an authentication message after establishing a connection to TAK Server, the username and password credentials contained in that message will be used, in conjunction with an authentication backend, to determine the group membership of a user. TAK Server will then filter messages according to common group membership, in a similar fashion to filtering configured by <filtergroups> for a given <input>."}),"\n",(0,i.jsx)(t.p,{children:"TAK Server can be configured at the input level to expect authentication messages with each new client connection. If the authentication message is not sent, or is invalid, the client will be disconnected.  The \u201cauth\u201d attribute on the input indicates which authentication strategy will be used when processing authentication messages. A value of \u201cfile\u201d tells TAK Server to validate authentication credentials using the flat-file backend. A value of \u201cldap\u201d indicates that an Active Directory or LDAP server should be used to validate the credentials."}),"\n",(0,i.jsx)(t.p,{children:"For example, this input definition specifies streaming TCP, encrypted with TLS, authenticating the user with a client certificate and also requiring an authentication message, and using the LDAP authentication backend:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'  <input _name="ldapssl" protocol="tls" port="8091"  auth="ldap"/>\n'})})]})}function g(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>o});var i=n(7294);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);