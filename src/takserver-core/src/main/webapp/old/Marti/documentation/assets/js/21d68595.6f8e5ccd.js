"use strict";(self.webpackChunkdocusaurus_static=self.webpackChunkdocusaurus_static||[]).push([[8888],{3754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=n(5893),i=n(1151);const s={},o="Appendix E: Proper Use of Trusted CAs",a={id:"appendixe",title:"Appendix E: Proper Use of Trusted CAs",description:"TAK uses Mutual TLS (MTLS) authentication to establish secure communications channels between TAK clients and TAK Server. It's critical that deployments use a CA created by the TAK server scripts, or another private CA, to establish the root of trust. Failure to follow this guidance could result in exposing your deployment to a Man-In-The-Middle (MITM) attack.",source:"@site/docs/appendixe.md",sourceDirName:".",slug:"/appendixe",permalink:"/docs/appendixe",draft:!1,unlisted:!1,editUrl:"https://gitlab.com/octospacc/editocttrialTools/-/blob/main/docusaurus-static/docs/appendixe.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Appendix D: PostgreSQL TLS Configuration",permalink:"/docs/appendixd"}},c={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"appendix-e-proper-use-of-trusted-cas",children:"Appendix E: Proper Use of Trusted CAs"}),"\n",(0,r.jsxs)(t.p,{children:["TAK uses Mutual TLS (MTLS) authentication to establish secure communications channels between TAK clients and TAK Server. It's critical that deployments use a CA created by the TAK server scripts, or another private CA, to establish the root of trust. ",(0,r.jsx)(t.strong,{children:"Failure to follow this guidance could result in exposing your deployment to a Man-In-The-Middle (MITM) attack."})]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"To ensure secure communications, it's critical that truststores deployed to TAK clients only contain CAs created by the TAK Server scripts or another private CA."}),"\n",(0,r.jsx)(t.li,{children:"There is never a need to add a LetsEncrypt, Digicert or any other public CA certificate to a truststore on a TAK client or TAK Server."}),"\n",(0,r.jsx)(t.li,{children:"When using Quick Connect, the LetsEncrypt or DigiCert server certificate should only be configured within your 8446 connector, and never within your <tls> configuration."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Appendix B of the TAK Server Configuration Guide (see Downloadable Resources section here ",(0,r.jsx)(t.a,{href:"https://tak.gov/products/tak-server",children:"https://tak.gov/products/tak-server"}),") contains steps for creating a root CA to use in your TAK deployment. The makeRootCa.sh script creates a private key and self-signed certificate for the CA, and packages up the CA certificate within truststores that can be configured on TAK clients and on TAK Server."]}),"\n",(0,r.jsxs)(t.p,{children:["Appendix B contains additional steps for creating a client and server certificates, signed by the root CA.  Appendix C describes TAK Server's Certificate Enrollment capability (",(0,r.jsx)(t.a,{href:"https://wiki.tak.gov/display/DEV/Certificate+Enrollment",children:"https://wiki.tak.gov/display/DEV/Certificate+Enrollment"}),") that automates the provisioning of client certificates. Users authenticate to the Certificate Enrollment endpoints with username/password, provide a CSR and receive a signed client certificate in return."]}),"\n",(0,r.jsx)(t.p,{children:"When enrolling using a server certificate from a self-signed TAK CA, clients must be bootstrapped with server's CA certificate prior to enrollment. To streamline provisioning of clients, TAK provides the Quick Connect feature that performs Certificate Enrollment using trust provided by LetsEncrypt or DigiCert CAs. TAK clients have embedded the LetsEncrypt and DigiCert CAs and will use these CAs when validating connections to the enrollment port.  In this configuration, the TAK client will be able to leverage the embedded LetsEncrypt CA certificate, along with TLS hostname verification, to ensure the integrity of the connection."}),"\n",(0,r.jsx)(t.p,{children:"To configure Quick Connect, the TAK server admin adds the keystore, keystoreFile, and keystorePass attributes on the 8446 connector to use the trusted server cert for enrollment, as shown below."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'\t    <connector port="8446" clientAuth="false" _name="cert_https" keystore="JKS" keystoreFile="certs/files/letsencrypt-server-cert.jks" keystorePass="example-pass"/>\n'})}),"\n",(0,r.jsx)(t.p,{children:"When using Quick Connect, you never have to do any configuration with LetsEncrypt or DigiCert CA itself. That is handled by embedding the CAs within the clients. The only reference to any key material from LetsEncrypt or DigiCert within your environment will be the server certificate contained in keystoreFile that's referenced by your 8446 connector."})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>o});var r=n(7294);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);