{"version":3,"sources":["serviceWorker.js","user/records/UserStateRecord.ts","maptile/records/MapTileStateRecord.ts","maptile/actions.ts","records/MLAStateRecord.ts","maptile/records/TileRecord.ts","maptile/tile-service.ts","user/actions.ts","user/user-services.ts","actions.ts","reducers.ts","maptile/reducer.ts","user/reducer.ts","store.ts","maptile/tiles-table/tiles-table.tsx","maptile/ol-map/ol-map.tsx","maptile/tile-form/tile-form.tsx","maptile/map-tile.tsx","layout/section.tsx","layout/toolbar.tsx","layout/container.tsx","TakDashboard.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","USER_ROLES","defaultMapTileState","compareLayers","undefined","editingTile","fetchingTiles","isAddingTile","mapState","center","zoom","selectedTile","showNewPanel","tiles","List","MapTileStateRecord","_Record","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","uid","find","tile","index","getTileIndex","getTile","set","setIn","_this2","update","defaultLayer","map","t","push","findIndex","Record","MapTileActionTypes","defaultUserState","fetchingRoles","roles","UserStateRecord","includes","ROLE_ADMIN","defaultMLAState","maptile","user","TileTypes","XYZ","defaultTile","createTime","creatorUid","description","enabled","isEditing","modifiedTime","name","type","url","TileRecord","params","objectSpread","TileService","_getTiles","asyncToGenerator","regenerator_default","a","mark","_callee","res","_ref","data","wrap","_context","prev","next","fetch","concat","BASE_URL","sent","json","abrupt","stop","apply","arguments","_addTile","_callee2","body","_ref2","_context2","toJS","JSON","stringify","headers","Content-Type","method","mode","_x","_editTile","_callee3","_ref3","_context3","_x2","_deleteTile","_callee4","tileUid","_context4","_x3","process","UserActionTypes","addTile","dispatch","ADD_TILE_PENDING","ADD_TILE_FULFILLED","payload","t0","ADD_TILE_REJECTED","removeTile","REMOVE_TILE_PENDING","deleteTile","REMOVE_TILE_FULFILLED","REMOVE_TILE_REJECTED","error","loadTiles","LOAD_TILES_PENDING","getTiles","LOAD_TILES_FULFILLED","LOAD_TILES_REJECTED","editTile","_ref4","newTile","EDIT_TILES_PENDING","EDIT_TILES_FULFILLED","EDIT_TILES_REJECTED","_x4","setCompareLayer","SET_COMPARE_LAYER","setMapTileValue","SET_VALUE","UserService","_getRoles","URL","loadRoles","LOAD_ROLES_PENDING","getRoles","LOAD_ROLES_FULFILLED","LOAD_ROLES_REJECTED","MLAACtionTypes","values","obj","keys","k","isKnownAction","action","indexOf","combineReducers","state","length","fetching","setTile","updateTile","filter","_action$payload","_action$payload2","fromJS","middlewares","thunk","enhancer","composeEnhancers","compose","applyMiddleware","store","createStore","reducers","TilesTable","_React$Component","_getPrototypeOf2","_len","args","Array","_key","renderRows","_this$props","selectTile","setCompareLayers","isSelected","activeA","activeB","react","onClick","className","join","controls","checked","onChange","onEnableTile","icon","iconSize","spinner","size","buttonGroup","minimal","buttons","onEdit","onRemoveTile","fill","small","active","toArray","renderTable","renderEmpty","nonIdealState","title","onAdd","loading","e","stopPropagation","setEditingTile","preventDefault","target","_this$props2","isFetching","count","_this$props3","renderControls","React","defaultProps","connect","bindActionCreators","OLMap","tileChange","getLayers","getArray","forEach","layer","removeLayer","addLayer","TileLayer","source","OSM","onMapChange","bind","assertThisInitialized","olContainer","OpenLayersMap","layers","view","View","projection","getView","on","prevProps","setCenter","setZoom","setTarget","ref","event","getCenter","getZoom","setMapState","toList","TileForm","onNameChange","setState","onUrlChange","onDescriptionChange","onTypeChange","onDefaultChange","onSubmit","_this$state","createTile","onClose","resetState","clearEditingTile","setTileState","_tile$toJS","isOpen","equals","isAdding","_this$state2","formInvalid","dialog","canEscapeKeyClose","canOutsideClickClose","formGroup","label","labelFor","inputGroup","id","textArea","rows","tileType","inline","Classes","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","disabled","intent","get","getSelectedTile","tiles_table","ol_map","tile_form","Section","children","Toolbar","navbar","fixedToTop","navbarGroup","navbarHeading","navbarDivider","BodyContainer","content","isAdmin","map_tile","href","BUTTON","toolbar_Toolbar","section_Section","TakDashboard","container","ReactDOM","es","src_TakDashboard","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f884327.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { List, Record } from 'immutable';\n\nenum USER_ROLES {\n  ROLE_ADMIN = 'ROLE_ADMIN',\n}\n\ninterface IUserStateRecord {\n  fetchingRoles: boolean;\n  roles: List<USER_ROLES>;\n}\n\nconst defaultUserState: IUserStateRecord = {\n  fetchingRoles: false,\n  roles: List(),\n};\n\nexport class UserStateRecord extends Record(defaultUserState) {\n  constructor(props?: IUserStateRecord) {\n    props ? super(props) : super();\n  }\n\n  public isAdmin() {\n    return this.roles.includes(USER_ROLES.ROLE_ADMIN);\n  }\n}\n","import { List, Record } from 'immutable';\nimport { ITile, TileRecord } from './TileRecord';\n\ninterface IMapState {\n  center: [number, number];\n  zoom: number;\n}\n\nexport interface IMapTileState {\n  tiles: List<TileRecord>;\n  mapState: IMapState;\n  compareLayers: [(string | undefined), (string | undefined)];\n  fetchingTiles: boolean;\n  /**\n   * uid of the currently selected TileRecord\n   */\n  selectedTile?: string;\n  editingTile?: string;\n  showNewPanel: boolean;\n  isAddingTile: boolean;\n}\n\nconst defaultMapState: IMapState = {\n  center: [42.359053, -71.058648],\n  zoom: 5,\n};\n\nconst defaultMapTileState: IMapTileState = {\n  compareLayers: [undefined, undefined],\n  editingTile: undefined,\n  fetchingTiles: false,\n  isAddingTile: false,\n  mapState: defaultMapState,\n  selectedTile: undefined,\n  showNewPanel: false,\n  tiles: List(),\n};\n\nexport class MapTileStateRecord extends Record(defaultMapTileState)\n  implements IMapTileState {\n  constructor(props?: IMapTileState) {\n    props ? super(props) : super();\n  }\n\n  public getTile(uid: string): TileRecord | undefined {\n    return this.tiles.find(tile => tile.uid === uid);\n  }\n\n  public setTile(\n    uid: string,\n    key: keyof ITile,\n    value: any\n  ): MapTileStateRecord {\n    const index = this.getTileIndex(uid);\n    let tile = this.getTile(uid);\n\n    if (!tile || index < 0) {\n      return this;\n    }\n\n    tile = tile.set(key, value);\n    return this.setIn(['tiles', index], tile);\n  }\n\n  public updateTile(tile: TileRecord) {\n    return this.update('tiles', tiles => {\n      const { defaultLayer } = tile;\n      const index = this.getTileIndex(tile.uid);\n      if (defaultLayer) {\n        tiles = tiles.map(t => t.set('defaultLayer', false));\n      }\n      return tiles.set(index, tile);\n    });\n  }\n  public addTile(tile: TileRecord) {\n    return this.update('tiles', tiles => {\n      const { defaultLayer } = tile;\n      if (defaultLayer) {\n        tiles = tiles.map(t => t.set('defaultLayer', false));\n      }\n      return tiles.push(tile);\n    });\n  }\n\n  public getSelectedTile(): TileRecord | undefined {\n    return this.selectedTile ? this.getTile(this.selectedTile) : undefined;\n  }\n\n  private getTileIndex(uid: string): number {\n    return this.tiles.findIndex(tile => tile.uid === uid);\n  }\n}\n","import { Action, Dispatch } from 'redux';\nimport { IPayloadAction } from '../actions';\nimport { IMapTileState } from './records/MapTileStateRecord';\nimport { TileRecord } from './records/TileRecord';\nimport { TileService } from './tile-service';\n\nexport enum MapTileActionTypes {\n  ADD_TILE_PENDING = 'maptile/ADD_TILE_PENDING',\n  ADD_TILE_FULFILLED = 'maptile/ADD_TILE_FULFILLED',\n  ADD_TILE_REJECTED = 'maptile/ADD_TILE_REJECTED',\n\n  REMOVE_TILE_PENDING = 'maptile/REMOVE_TILE_PENDING',\n  REMOVE_TILE_FULFILLED = 'maptile/REMOVE_TILE_FULFILLED',\n  REMOVE_TILE_REJECTED = 'maptile/REMOVE_TILE_REJECTED',\n\n  LOAD_TILES_PENDING = 'maptile/LOAD_TILES_PENDING',\n  LOAD_TILES_FULFILLED = 'maptile/LOAD_TILES_FULFILLED',\n  LOAD_TILES_REJECTED = 'maptile/LOAD_TILES_REJECTED',\n\n  EDIT_TILES_PENDING = 'maptile/EDIT_TILES_PENDING',\n  EDIT_TILES_FULFILLED = 'maptile/EDIT_TILES_FULFILLED',\n  EDIT_TILES_REJECTED = 'maptile/EDIT_TILES_REJECTED',\n\n  SET_COMPARE_LAYER = 'maptile/SET_COMPARE_LAYER',\n  SET_VALUE = 'maptile/SET_VALUE',\n}\n\n/* ADD TILE */\ntype AddTilePending = Action<MapTileActionTypes.ADD_TILE_PENDING>;\ntype AddTileFulfilled = IPayloadAction<\n  MapTileActionTypes.ADD_TILE_FULFILLED,\n  TileRecord\n>;\ntype AddTileRejected = IPayloadAction<\n  MapTileActionTypes.ADD_TILE_REJECTED,\n  Error\n>;\ntype AddTile = AddTilePending | AddTileFulfilled | AddTileRejected;\n\nexport const addTile = (tile: TileRecord) => async (\n  dispatch: Dispatch<AddTile>\n) => {\n  dispatch({ type: MapTileActionTypes.ADD_TILE_PENDING });\n  try {\n    const res = await TileService.addTile(tile);\n    dispatch({ type: MapTileActionTypes.ADD_TILE_FULFILLED, payload: res });\n  } catch (error) {\n    dispatch({ type: MapTileActionTypes.ADD_TILE_REJECTED, payload: error });\n  }\n};\n\n/* REMOVE TILE */\ntype RemoveTilePending = IPayloadAction<\n  MapTileActionTypes.REMOVE_TILE_PENDING,\n  string\n>;\ntype RemoveTileFulfilled = IPayloadAction<\n  MapTileActionTypes.REMOVE_TILE_FULFILLED,\n  string\n>;\ntype RemoveTileRejected = IPayloadAction<\n  MapTileActionTypes.REMOVE_TILE_REJECTED,\n  { uid: string; error: Error }\n>;\ntype RemoveTile = RemoveTilePending | RemoveTileFulfilled | RemoveTileRejected;\n\nexport const removeTile = (uid: string) => async (\n  dispatch: Dispatch<RemoveTile>\n) => {\n  dispatch({ type: MapTileActionTypes.REMOVE_TILE_PENDING, payload: uid });\n  try {\n    await TileService.deleteTile(uid);\n    dispatch({ type: MapTileActionTypes.REMOVE_TILE_FULFILLED, payload: uid });\n  } catch (error) {\n    dispatch({\n      type: MapTileActionTypes.REMOVE_TILE_REJECTED,\n      payload: { uid, error },\n    });\n  }\n};\n\n/* LOAD TILES */\ntype LoadTilePending = Action<MapTileActionTypes.LOAD_TILES_PENDING>;\ntype LoadTileFulfilled = IPayloadAction<\n  MapTileActionTypes.LOAD_TILES_FULFILLED,\n  TileRecord[]\n>;\ntype LoadTileRejected = IPayloadAction<\n  MapTileActionTypes.LOAD_TILES_REJECTED,\n  Error\n>;\ntype LoadTile = LoadTilePending | LoadTileFulfilled | LoadTileRejected;\n\nexport const loadTiles = () => async (dispatch: Dispatch<LoadTile>) => {\n  dispatch({ type: MapTileActionTypes.LOAD_TILES_PENDING });\n  try {\n    const tiles = await TileService.getTiles();\n    dispatch({ type: MapTileActionTypes.LOAD_TILES_FULFILLED, payload: tiles });\n  } catch (error) {\n    dispatch({ type: MapTileActionTypes.LOAD_TILES_REJECTED, payload: error });\n  }\n};\n\n/* EDIT TILE */\ntype EditTilePending = IPayloadAction<\n  MapTileActionTypes.EDIT_TILES_PENDING,\n  { uid: string }\n>;\ntype EditTileFulfilled = IPayloadAction<\n  MapTileActionTypes.EDIT_TILES_FULFILLED,\n  TileRecord\n>;\ntype EditTileRejected = IPayloadAction<\n  MapTileActionTypes.EDIT_TILES_REJECTED,\n  { uid: string; error?: Error }\n>;\ntype EditTile = EditTilePending | EditTileFulfilled | EditTileRejected;\n\nexport const editTile = (tile: TileRecord) => async (\n  dispatch: Dispatch<EditTile>\n) => {\n  dispatch({\n    type: MapTileActionTypes.EDIT_TILES_PENDING,\n    payload: { uid: tile.uid },\n  });\n  try {\n    const newTile = await TileService.editTile(tile);\n    dispatch({\n      type: MapTileActionTypes.EDIT_TILES_FULFILLED,\n      payload: newTile,\n    });\n  } catch (error) {\n    dispatch({\n      type: MapTileActionTypes.EDIT_TILES_REJECTED,\n      payload: { uid: tile.uid, error },\n    });\n  }\n};\n\n/* SET COMPARE LAYER */\ntype SetCompareLayer = IPayloadAction<\n  MapTileActionTypes.SET_COMPARE_LAYER,\n  { index: number; tileUid: string }\n>;\nexport const setCompareLayer = (tileUid: string, index: number) => ({\n  type: MapTileActionTypes.SET_COMPARE_LAYER,\n  payload: { index, tileUid },\n});\n\n/* SET VALUE */\ntype TileStateKey = keyof IMapTileState;\ninterface ISetValuePayload<K extends TileStateKey> {\n  key: K;\n  value: IMapTileState[K];\n}\n\ntype SetValue = IPayloadAction<\n  MapTileActionTypes.SET_VALUE,\n  ISetValuePayload<keyof IMapTileState>\n>;\nexport const setMapTileValue = <K extends TileStateKey>(\n  key: K,\n  value: IMapTileState[K]\n) => ({\n  payload: { key, value },\n  type: MapTileActionTypes.SET_VALUE,\n});\n\nexport type MapTileActions =\n  | AddTile\n  | LoadTile\n  | RemoveTile\n  | EditTile\n  | SetCompareLayer\n  | SetValue;\n","import { Record } from 'immutable';\nimport { MapTileStateRecord } from '../maptile/records/MapTileStateRecord';\nimport { UserStateRecord } from '../user/records/UserStateRecord';\n\nexport interface IMLAState {\n  maptile: MapTileStateRecord;\n  user: UserStateRecord;\n}\n\nexport const defaultMLAState: IMLAState = {\n  maptile: new MapTileStateRecord(),\n  user: new UserStateRecord(),\n};\n\nexport class MLAStateRecord extends Record(defaultMLAState)\n  implements IMLAState {\n  constructor(props?: IMLAState) {\n    props ? super(props) : super();\n  }\n}\n","import { Record } from 'immutable';\n\nexport const TileTypes = {\n  // WMS: \"WMS\",\n  // WMTS: \"WMTS\",\n  XYZ: 'XYZ',\n};\n\nexport interface ITile {\n  type: keyof typeof TileTypes;\n  name: string;\n  url: string;\n  uid: string;\n  createTime: string;\n  creatorUid: string;\n  modifiedTime: string;\n  description: string;\n  defaultLayer: boolean;\n  enabled: boolean;\n  isEditing: boolean;\n}\n\nconst defaultTile: ITile = {\n  createTime: '',\n  creatorUid: '',\n  defaultLayer: false,\n  description: '',\n  enabled: true,\n  isEditing: false,\n  modifiedTime: '',\n  name: '',\n  type: 'XYZ',\n  uid: '',\n  url: '',\n};\n\nexport class TileRecord extends Record(defaultTile) implements ITile {\n  public static createTile(props: Partial<ITile>): TileRecord {\n    return new TileRecord({\n      ...defaultTile,\n      ...props,\n    });\n  }\n  constructor(params: ITile) {\n    params ? super(params) : super();\n  }\n}\n","import { ITile, TileRecord } from './records/TileRecord';\n\nexport class TileService {\n  public static readonly BASE_URL = `${\n    process.env.REACT_APP_HOST\n  }/Marti/api/maplayers`;\n\n  public static async getTiles(): Promise<TileRecord[]> {\n    const res = await fetch(`${TileService.BASE_URL}/all`);\n    const { data } = await res.json();\n    return data.map((tile: ITile) => new TileRecord(tile));\n  }\n\n  public static async addTile(tile: TileRecord): Promise<TileRecord> {\n    const body = tile.toJS();\n    const res = await fetch(`${TileService.BASE_URL}/`, {\n      body: JSON.stringify(body),\n      headers: { 'Content-Type': 'application/json' },\n      method: 'POST',\n      mode: 'cors',\n    });\n    const { data } = await res.json();\n    return new TileRecord(data);\n  }\n\n  public static async editTile(tile: TileRecord): Promise<TileRecord> {\n    const url = `${TileService.BASE_URL}`;\n    const body = tile.toJS();\n    const res = await fetch(url, {\n      body: JSON.stringify(body),\n      headers: { 'Content-Type': 'application/json' },\n      method: 'PUT',\n      mode: 'cors',\n    });\n    const { data } = await res.json();\n    return new TileRecord(data);\n  }\n\n  public static async deleteTile(tileUid: string): Promise<any> {\n    const url = `${TileService.BASE_URL}/${tileUid}`;\n    return fetch(url, { method: 'DELETE' });\n  }\n}\n","import { Action, Dispatch } from 'redux';\nimport { IPayloadAction } from '../actions';\nimport { UserService } from './user-services';\n\nexport enum UserActionTypes {\n  LOAD_ROLES_PENDING = 'user/LOAD_ROLES_PENDING',\n  LOAD_ROLES_FULFILLED = 'user/LOAD_ROLES_FULFILLED',\n  LOAD_ROLES_REJECTED = 'user/LOAD_ROLES_REJECTED',\n}\n\n/* LOAD USER ROLES */\ntype LoadRolesPending = Action<UserActionTypes.LOAD_ROLES_PENDING>;\ntype LoadRolesFulfilled = IPayloadAction<\n  UserActionTypes.LOAD_ROLES_FULFILLED,\n  string[]\n>;\ntype LoadRolesRejected = IPayloadAction<\n  UserActionTypes.LOAD_ROLES_REJECTED,\n  Error\n>;\ntype LoadRoles = LoadRolesPending | LoadRolesFulfilled | LoadRolesRejected;\n\nexport const loadRoles = () => async (dispatch: Dispatch<LoadRoles>) => {\n  dispatch({ type: UserActionTypes.LOAD_ROLES_PENDING });\n  try {\n    const roles = await UserService.getRoles();\n    dispatch({ type: UserActionTypes.LOAD_ROLES_FULFILLED, payload: roles });\n  } catch (error) {\n    dispatch({ type: UserActionTypes.LOAD_ROLES_REJECTED, payload: error });\n  }\n};\n\nexport type UserActions = LoadRoles;\n","export class UserService {\n  public static readonly URL = `${\n    process.env.REACT_APP_HOST\n  }/Marti/api/util/user/roles`;\n\n  public static async getRoles(): Promise<string[]> {\n    const res = await fetch(UserService.URL);\n    return res.json();\n  }\n}\n","import { Action } from 'redux';\nimport { MapTileActions, MapTileActionTypes } from './maptile/actions';\nimport { UserActions, UserActionTypes } from './user/actions';\n\nexport type AnyStringExcept<T extends string> = { [P in T]: never };\nexport interface IPayloadAction<T, P = undefined> extends Action<T> {\n  payload: P;\n}\n\nexport type MLAActions = MapTileActions | UserActions;\nexport type UnknownAction = Action<AnyStringExcept<MLAActions['type']>>;\n\nexport const MLAACtionTypes = { ...MapTileActionTypes, ...UserActionTypes };\n\nconst values = (obj: any) => Object.keys(obj).map((k: any) => obj[k]);\nexport function isKnownAction<T>(action: any): action is T {\n  return action && values(MLAACtionTypes).indexOf(action.type) >= 0;\n}\n","import { combineReducers } from 'redux';\nimport { MLAActions } from './actions';\nimport { maptile } from './maptile/reducer';\nimport { IMLAState } from './records/MLAStateRecord';\nimport { user } from './user/reducer';\n\nexport default combineReducers<IMLAState, any>({\n  maptile,\n  user,\n});\n","import { List } from 'immutable';\nimport { isKnownAction, UnknownAction } from '../actions';\nimport { MapTileStateRecord } from '../maptile/records/MapTileStateRecord';\nimport { MapTileActions, MapTileActionTypes } from './actions';\n\nexport function maptile(\n  state = new MapTileStateRecord(),\n  action: MapTileActions | UnknownAction\n): MapTileStateRecord {\n  if (!isKnownAction<MapTileActions>(action)) {\n    return state;\n  }\n  switch (action.type) {\n    /* ADD TILE */\n    case MapTileActionTypes.ADD_TILE_PENDING:\n      return state.set('isAddingTile', true);\n    case MapTileActionTypes.ADD_TILE_FULFILLED:\n      return state\n        .set('isAddingTile', false)\n        .set('showNewPanel', false)\n        .addTile(action.payload);\n    case MapTileActionTypes.ADD_TILE_REJECTED:\n      return state.set('isAddingTile', false);\n\n    /* LOAD TILES */\n    case MapTileActionTypes.LOAD_TILES_PENDING:\n    case MapTileActionTypes.LOAD_TILES_REJECTED:\n      return state.update('fetchingTiles', fetching => !fetching);\n    case MapTileActionTypes.LOAD_TILES_FULFILLED:\n      return state\n        .set('tiles', List(action.payload))\n        .set('fetchingTiles', false);\n\n    /* EDIT TILE*/\n    case MapTileActionTypes.EDIT_TILES_PENDING:\n      return state.setTile(action.payload.uid, 'isEditing', true);\n    case MapTileActionTypes.EDIT_TILES_REJECTED:\n      return state.setTile(action.payload.uid, 'isEditing', false);\n    case MapTileActionTypes.EDIT_TILES_FULFILLED:\n      return state\n        .updateTile(action.payload)\n        .set('showNewPanel', false)\n        .set('editingTile', undefined);\n\n    /* REMOVE TILE */\n    case MapTileActionTypes.REMOVE_TILE_PENDING:\n      return state.setTile(action.payload, 'isEditing', true);\n    case MapTileActionTypes.REMOVE_TILE_REJECTED:\n      return state.setTile(action.payload.uid, 'isEditing', false);\n    case MapTileActionTypes.REMOVE_TILE_FULFILLED:\n      return state.update('tiles', tiles => {\n        return tiles.filter(tile => tile.uid !== action.payload);\n      });\n\n    /* SET VALUE */\n    case MapTileActionTypes.SET_VALUE:\n      const { key, value } = action.payload;\n      return state.set(key, value);\n\n    case MapTileActionTypes.SET_COMPARE_LAYER:\n      const { tileUid, index } = action.payload;\n      return state.setIn(['compareLayers', index], tileUid);\n  }\n\n  // tslint:disable-next-line:variable-name\n  const _never: never = action;\n  return state;\n}\n","import { fromJS } from 'immutable';\nimport { isKnownAction, UnknownAction } from '../actions';\nimport { UserActions, UserActionTypes } from './actions';\nimport { UserStateRecord } from './records/UserStateRecord';\n\nexport function user(\n  state = new UserStateRecord(),\n  action: UserActions | UnknownAction\n): UserStateRecord {\n  if (!isKnownAction<UserActions>(action)) {\n    return state;\n  }\n\n  switch (action.type) {\n    /* LOAD ROLES */\n    case UserActionTypes.LOAD_ROLES_PENDING:\n      return state.set('fetchingRoles', true);\n    case UserActionTypes.LOAD_ROLES_FULFILLED: {\n      return state\n        .set('roles', fromJS(action.payload))\n        .set('fetchingRoles', false);\n    }\n    case UserActionTypes.LOAD_ROLES_REJECTED: {\n      return state.set('fetchingRoles', false);\n    }\n  }\n\n  // tslint:disable-next-line:variable-name\n  const _never: never = action;\n  return state;\n}\n","import { applyMiddleware, compose, createStore, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { defaultMLAState, IMLAState } from './records/MLAStateRecord';\nimport reducers from './reducers';\n\nconst PRODUCTION = process.env.NODE_ENV === 'production';\n\nconst middlewares = [thunk];\nconst composeEnhancers = PRODUCTION\n  ? compose\n  : (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\nconst store: Store<IMLAState> = createStore(\n  reducers,\n  defaultMLAState,\n  enhancer\n);\n\nexport default store;\n","import { Button, ButtonGroup, Checkbox, Icon, NonIdealState, Spinner } from '@blueprintjs/core';\nimport { List } from 'immutable';\nimport * as React from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { MLAActions } from '../../actions';\nimport { IMLAState } from '../../records/MLAStateRecord';\nimport { editTile, loadTiles, removeTile, setCompareLayer, setMapTileValue } from '../actions'\nimport { TileRecord } from \"../records/TileRecord\";\nimport \"./_tiles-table.scss\";\n\ninterface ITileTableProps {\n  isFetching: boolean,\n  tiles: List<TileRecord>,\n  selectedTile?: string,\n  compareLayers: [(string | undefined), (string | undefined)],\n  setCompareLayers(tileUid: string, index: 0 | 1): void,\n  selectTile(key: string | undefined): void,\n  loadTiles(): void\n  onAdd(): void,\n  removeTile(uid: string): void,\n  setEditingTile(tile: string): void,\n  editTile(tile: TileRecord): void,\n}\n\nexport class TilesTable extends React.Component<ITileTableProps, {}> {\n  public static defaultProps = {\n    isFetching: false,\n    selectedTile: undefined,\n  }\n  \n  public componentDidMount() {\n    const { tiles, isFetching } = this.props;\n    if (!isFetching && tiles.count() === 0) {\n        this.props.loadTiles();\n    }\n  }\n\n  public renderControls () {\n    return (\n      <div className=\"tiles-table__controlls\">\n        <Button icon=\"plus\" onClick={this.props.onAdd} loading={false}>\n          Add New\n        </Button>\n      </div>\n    )\n  }\n\n  public renderRows = () => {\n    const { tiles, selectedTile, selectTile, compareLayers, setCompareLayers } = this.props;\n\n    return tiles.map((tile: TileRecord) => {\n      const { defaultLayer } = tile\n      const isSelected = tile.uid === selectedTile;\n      const classes = ['tiles-table__table-row'];\n      \n      const onSelect = () => { \n        selectTile(isSelected ? undefined : tile.uid) \n      };\n\n      // if (isSelected) { \n      //   classes.push('tiles-table__table-row--selected')\n      // }\n\n      const activeA = compareLayers[0] === tile.uid;\n      const activeB = compareLayers[1] === tile.uid;\n\n      return (\n        <tr onClick={onSelect} className={classes.join(' ')} key={tile.uid}>\n          <td>\n            <Checkbox checked={tile.enabled} onChange={this.onEnableTile(tile)} />\n          </td>\n          <td>\n            {`${tile.name} `} {defaultLayer && \n            (<Icon className=\"tiles-table__star-icon\" iconSize={10} icon=\"star\"/>)}\n          </td>\n          <td>{tile.type}</td>\n          <td>{tile.createTime}</td>\n          <td>{tile.modifiedTime}</td>\n          <td>\n            {\n              tile.isEditing \n                ? <Spinner size={20}/>\n                : <ButtonGroup minimal key=\"action-button-group\">\n                    <Button minimal onClick={this.onEdit(tile)} key=\"edit\" icon=\"edit\"/>\n                    <Button minimal key=\"delete\" icon=\"trash\" onClick={this.onRemoveTile(tile.uid)} />\n                  </ButtonGroup>\n            }\n          </td>\n          <td>\n            <ButtonGroup fill key=\"compare-button-group\">\n              <Button small active={activeA} onClick={() => setCompareLayers(tile.uid, 0)}>\n                <Icon icon=\"caret-left\"></Icon>\n                <Icon icon=\"map\"/>\n              </Button>\n              <Button small active={activeB} onClick={() => setCompareLayers(tile.uid, 1)}>\n                <Icon icon=\"map\"/>\n                <Icon icon=\"caret-right\"></Icon>\n              </Button>\n            </ButtonGroup>\n          </td>\n        </tr>\n      )\n    }).toArray()\n  }\n\n  public renderTable = () => {\n    return (\n      <div className=\"tiles-table__table\">\n        <table className=\"bp3-html-table bp3-interactive\">\n          <thead>\n            <tr>\n              <th>Enabled</th>\n              <th>Map Alias</th>\n              <th>Type</th>\n              <th>Created on</th>\n              <th>Modified on</th>\n              <th>Actions</th>\n              <th>Compare Layers</th>\n            </tr>\n          </thead>\n          <tbody>\n          {this.renderRows()}\n         </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  public renderEmpty = () => {\n    return (\n      <NonIdealState \n        title=\"Nothing to show\"\n        description=\"No layers found, add a new layer\"\n        action={\n          <Button icon=\"plus\" onClick={this.props.onAdd} loading={false}>\n            Add New\n          </Button>\n        }\n      />\n    )\n  }\n\n  public render() {\n    const { isFetching, tiles } = this.props;\n\n    if (!tiles.count() && !isFetching) {\n      return <div className=\"bp3-card\">{this.renderEmpty()}</div>\n    }\n\n    return (\n      <div className=\"tiles-table bp3-card\">\n        <div className=\"tiles-table__header\">\n          <h3>Map Tiles</h3>  \n          {this.renderControls()}\n        </div>        \n        {isFetching \n          ? <Spinner className=\"tiles-table__loader\" size={40} /> \n          : this.renderTable()\n        }\n      </div>\n    )\n  }\n\n  private onRemoveTile = (tileUid: string) => (e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    this.props.removeTile(tileUid)\n  }\n\n  private onEdit = (tile: TileRecord) => (e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    this.props.setEditingTile(tile.uid);\n    this.props.onAdd();\n  }\n\n  private onEnableTile = (tile: TileRecord) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n    e.preventDefault()\n    this.props.editTile(tile.set('enabled', e.target.checked))\n  }\n}\n\nconst mapStateToProps = ({ maptile }: IMLAState) => {\n  return {\n    compareLayers: maptile.compareLayers,\n    isFetching: maptile.fetchingTiles,\n    selectedTile: maptile.selectedTile,\n    tiles: maptile.tiles,\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<MLAActions>) => {\n  return bindActionCreators({ \n    editTile,\n    loadTiles,\n    onAdd: () => setMapTileValue('showNewPanel', true),\n    removeTile,\n    selectTile: (tileUid: string) => setMapTileValue('selectedTile', tileUid),\n    setCompareLayers: setCompareLayer,\n    setEditingTile: (uid: string) => setMapTileValue('editingTile', uid),\n  }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TilesTable)","import TileLayer from 'ol/layer/Tile';\nimport OpenLayersMap from 'ol/Map';\nimport 'ol/ol.css';\nimport OSM from 'ol/source/OSM';\nimport XYZ from 'ol/source/XYZ';\nimport View from 'ol/View';\n\nimport { List } from 'immutable';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { MLAActions } from '../../actions';\nimport { IMLAState } from '../../records/MLAStateRecord';\nimport { setMapTileValue } from '../actions'\nimport { TileRecord } from '../records/TileRecord';\nimport \"./_ol-map.scss\";\n\n\ninterface IOLMapProps {\n  center?: ol.Coordinate,\n  zoom?: number,\n  tile?: TileRecord,\n  tiles: List<TileRecord>\n  setMapState(center: ol.Coordinate, zoom: number): void\n}\n\nclass OLMap extends React.Component<IOLMapProps, {}> {\n  public olContainer?: Element | null;\n  public map!: OpenLayersMap;\n\n  constructor(props: IOLMapProps) {\n    super(props);\n    this.onMapChange = this.onMapChange.bind(this)\n  }\n\n  public componentDidMount() {\n    const { tile } = this.props; \n    if (this.olContainer) {\n      this.map = new OpenLayersMap({\n        layers: [\n          new TileLayer({\n            source: new OSM()\n          }),\n        ],\n        target: this.olContainer,\n        view: new View({\n          center: [-71.058648, 42.359053],\n          projection: 'EPSG:4326',\n          zoom: this.props.zoom\n        })\n      })\n      this.map.getView().on('change', this.onMapChange)\n    }\n  }\n\n  public componentDidUpdate(prevProps: IOLMapProps) {\n    const { center, zoom } = this.props;\n    if (zoom && center && (prevProps.center !== center || prevProps.zoom !== zoom) &&  this.map) {\n      this.map.getView().setCenter(center)\n      this.map.getView().setZoom(zoom)\n    }\n\n    if (this.props.tile !== prevProps.tile) {\n      this.tileChange(this.props.tile)\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.map) {\n      this.map.setTarget(undefined as any)\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"ol-map bp3-card\" ref={(ref) => {this.olContainer = ref}}></div>\n    )\n  }\n\n  private onMapChange(event: any) {\n    const center = event.target.getCenter();\n    const zoom = event.target.getZoom();\n    this.props.setMapState(center, zoom);\n  }\n\n  private tileChange = (newTile?: TileRecord) => {\n    this.map.getLayers().getArray().forEach(layer => {\n      this.map.removeLayer(layer)\n    })\n    if (!newTile) {\n      this.map.addLayer(new TileLayer({source: new OSM()}))\n    } else {\n      this.map.addLayer(new TileLayer({\n        source: new XYZ({ url: newTile.url }),\n        \n      }))\n    }\n  }\n}\n\nconst mapStateToProps = ({ maptile } : IMLAState, { tileUid }: any) => {\n  const tile = maptile.getTile(tileUid);\n  return {\n    center: maptile.mapState.center,\n    tile,\n    tiles: maptile.tiles.toList(),\n    zoom: maptile.mapState.zoom,\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<MLAActions>) => {\n  return bindActionCreators({ \n    setMapState: (center, zoom) => setMapTileValue('mapState', { center, zoom }),\n  }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OLMap)","import { Button, Checkbox, Classes, Dialog, FormGroup, InputGroup, TextArea } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { MLAActions } from \"../../actions\";\nimport { IMLAState } from \"../../records/MLAStateRecord\";\nimport { addTile, editTile, setMapTileValue } from \"../actions\";\nimport { TileRecord, TileTypes } from \"../records/TileRecord\";\nimport \"./_tile-form.scss\";\n\ninterface ITileFormProps {\n  isOpen: boolean,\n  isAdding: boolean, \n  tile?: TileRecord,\n  onClose(): void,\n  clearEditingTile(): void,\n  addTile(tile: TileRecord): void,\n  editTile(tile: TileRecord): void,\n}\n\ninterface ITileFormState {\n  defaultLayer: boolean,\n  description: string,\n  name: string,\n  type: keyof typeof TileTypes, \n  url: string,\n  mode: 'adding' | 'editing'\n}\n\nclass TileForm extends React.PureComponent<ITileFormProps, ITileFormState> {\n  constructor(props: ITileFormProps) {\n    super(props);\n    this.state = {\n      defaultLayer: false,\n      description: '',\n      mode: 'adding',\n      name: '',\n      type: 'XYZ',\n      url: '',\n      }\n  }\n  \n  public componentDidMount() {\n    if (this.props.tile) {\n      this.setTileState(this.props.tile);\n    } else {\n      this.resetState();\n    }\n  }\n\n  public componentDidUpdate(prevProps: ITileFormProps) {\n    if(prevProps.isOpen && !this.props.isOpen) {\n      this.onClose();\n    }\n\n    if (this.props.tile && !this.props.tile.equals(prevProps.tile)) {\n      this.setTileState(this.props.tile);\n    }\n  }\n\n  public onNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: e.target.value })\n  };\n\n  public onUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => this.setState({ url: e.target.value });\n\n  public onDescriptionChange =  (e: React.ChangeEvent<HTMLTextAreaElement>) => this.setState({ description: e.target.value })\n\n  public onTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ type: e.target.value as keyof typeof TileTypes})\n  }\n\n  public onDefaultChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ defaultLayer: e.target.checked })\n  };\n\n  public onSubmit = () => {\n    const { name, description, type, url, defaultLayer, mode } = this.state;\n    if (mode === 'adding') {\n      this.props.addTile(TileRecord.createTile({ name, description, type, url, defaultLayer }))\n    } else {\n      if (this.props.tile) {\n        this.props.editTile(\n          this.props.tile.set('name', name)\n            .set('description', description)\n            .set('type', type)\n            .set('url', url)\n            .set('defaultLayer', defaultLayer)\n        )\n      }\n    }\n  }\n\n  public onClose = () => {\n    this.resetState()\n    this.props.onClose();\n    this.props.clearEditingTile();\n  }\n  \n  public render() {\n    const { isOpen,  isAdding } = this.props;\n    const { name, description, type, url, defaultLayer, mode } = this.state;\n    \n    const formInvalid = name === '' || url === ''\n    const isEditing = mode === 'editing';\n    \n    const title = isEditing ? `Edit ${name}` : 'New Tile Alias';\n\n    return (\n      <Dialog canEscapeKeyClose={false} canOutsideClickClose={false} title={title} isOpen={isOpen} onClose={this.onClose}>\n        <div className=\"tile-form\">\n          <FormGroup label=\"Name\" labelFor=\"layer-name\">\n            <InputGroup id=\"layer-name\" value={name} onChange={this.onNameChange} />\n          </FormGroup>\n          <FormGroup label=\"URL\" labelFor=\"layer-url\">\n            <InputGroup id=\"layer-name\" value={url} onChange={this.onUrlChange} />\n          </FormGroup>\n          <FormGroup label=\"Description\" labelFor=\"layer-description\">\n            <TextArea fill rows={2} id=\"layer-description\" value={description} onChange={this.onDescriptionChange} />\n          </FormGroup>\n          <FormGroup label=\"Type\" labelFor=\"layer-type\">\n            <div className=\"bp3-select bp3-fill\">\n              <select value={type} onChange={this.onTypeChange}>\n                {Object.keys(TileTypes).map((tileType) => (\n                  <option key={tileType} value={tileType}>{tileType}</option>\n                ))}\n              </select>\n            </div>\n          </FormGroup>\n          <FormGroup label=\"Default\" labelFor=\"layer-description\" inline>\n            <Checkbox onChange={this.onDefaultChange} checked={defaultLayer} type=\"checkbox\" name=\"\"/>\n          </FormGroup>            \n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button disabled={isAdding} onClick={this.onClose} intent='danger'>Cancel</Button>\n            <Button disabled={formInvalid} intent=\"primary\" loading={isAdding} onClick={this.onSubmit}>\n              {isEditing ? 'Save' : 'Submit'}\n            </Button>\n          </div>  \n        </div>\n        </div>\n      </Dialog>\n    )\n  }\n\n  private resetState = () => {\n    this.setState({ \n      defaultLayer: false,\n      description: '', \n      mode: 'adding',\n      name: '', \n      type: 'XYZ',\n      url: '',\n    })\n  }\n\n  private setTileState = (tile: TileRecord) => {\n    const { defaultLayer, name, type, url, description } = tile.toJS();\n      this.setState({\n        defaultLayer,\n        description,\n        mode: 'editing',\n        name,\n        type,\n        url,\n      })\n  }\n}\n\nconst mapStateToProps = ({ maptile }: IMLAState) => {\n  const tile = maptile.editingTile ? maptile.getTile(maptile.editingTile) : undefined;\n  return {\n    isAdding: maptile.isAddingTile,\n    isOpen: maptile.showNewPanel,\n    tile,\n  }\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<MLAActions>) => bindActionCreators(\n  { \n    addTile,\n    clearEditingTile: () => setMapTileValue('editingTile', undefined),\n    editTile,\n    onClose: () => setMapTileValue('showNewPanel', false),\n  }, \n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TileForm);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport TilesTable from '../maptile/tiles-table/tiles-table';\nimport { IMLAState } from '../records/MLAStateRecord';\nimport './_map-tile.scss';\nimport OLMap from './ol-map/ol-map';\nimport { TileRecord } from './records/TileRecord';\nimport TileForm from './tile-form/tile-form';\n\ninterface IMapTile {\n  tile?: TileRecord,\n  compareLayers: [(string | undefined), (string | undefined)]\n}\n\nconst MapTile = ({ compareLayers }: IMapTile) => {\n  return (\n    <div className=\"map-tile\">\n      <div className=\"map-tile__top\">\n        <div className=\"map-tile__table\"><TilesTable/></div>\n      </div>\n      <div className=\"map-tile__bottom\">\n        <OLMap tileUid={compareLayers[0]}/>\n        <OLMap tileUid={compareLayers[1]}/>\n      </div>\n      <TileForm />\n    </div>\n  )\n}\n\nconst mapStateToProps = ({ maptile }: IMLAState) => {\n  return {\n    compareLayers: maptile.get('compareLayers'),\n    tile: maptile.getSelectedTile(),\n  }\n}\n\nexport default connect(mapStateToProps, undefined)(MapTile)","import * as React from 'react';\nimport \"./_section.scss\";\n\nexport const Section = ({ children }: any) => {\n  return (\n    <div className=\"section\">\n      {children}\n    </div>\n  )\n}","import {\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n} from \"@blueprintjs/core\";\nimport * as React from 'react';\nimport \"./_toolbar.scss\";\n\nexport class Toolbar extends React.Component {\n  public render() {\n    return (\n    <Navbar fixedToTop={true}>\n      <NavbarGroup>\n        <NavbarHeading className=\"toolbar__logo\">\n        <span className=\"toolbar__logo--tak\">TAK</span>\n        <span>MLA</span>\n        </NavbarHeading>\n        <NavbarDivider />\n      </NavbarGroup>\n    </Navbar>\n    )\n  }\n}","import * as React from 'react';\nimport MapTile from '../maptile/map-tile';\nimport { Section } from \"./section\";\nimport { Toolbar } from './toolbar';\n\nimport { Classes, NonIdealState, Spinner } from '@blueprintjs/core';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { MLAActions } from '../actions';\nimport { IMLAState } from '../records/MLAStateRecord';\nimport { loadRoles } from '../user/actions';\n\ninterface IBodyContainerProps {\n  fetchingRoles: boolean,\n  isAdmin: boolean,\n  loadRoles(): void,\n}\n\nclass BodyContainer extends React.Component<IBodyContainerProps,{}> {\n  public componentDidMount() {\n    if (!this.props.fetchingRoles) {\n      this.props.loadRoles();\n    }\n  }\n\n  public render() {\n    let content = null;\n    if (this.props.fetchingRoles) {\n      content = (\n        <NonIdealState \n          icon={<Spinner size={40}/>}\n        />\n      )\n    } else if (!this.props.isAdmin) {\n      content = (\n        <NonIdealState\n          title={'Permission denied'}\n          icon='blocked-person'\n          action={<a target=\"__blank\" href={`${process.env.REACT_APP_HOST}/Marti/webtak/`} className={Classes.BUTTON}>Go to WebTAK</a>}\n        />\n      )\n    } else {\n      content = <MapTile />\n    }\n\n    return (\n      <div className=\"app-container\">\n        <Toolbar />\n        <Section>\n          {content}\n        </Section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user }: IMLAState) => {\n  return {\n    fetchingRoles: user.fetchingRoles,\n    isAdmin: user.isAdmin(),\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<MLAActions>) => bindActionCreators(\n  { \n    loadRoles\n  }, \n  dispatch\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BodyContainer);","import * as React from 'react';\nimport BodyContainer from './layout/container';\n\nclass TakDashboard extends React.Component<{}, {}> {\n  public render() {\n    return <BodyContainer />\n  }\n}\n\nexport default TakDashboard;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport \"./mla.scss\"\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport TakDashboard from './TakDashboard';\n\nReactDOM.render(\n  <Provider store={store}><TakDashboard /></Provider>, \n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}